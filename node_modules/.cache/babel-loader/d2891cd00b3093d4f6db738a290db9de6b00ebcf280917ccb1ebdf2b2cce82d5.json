{"ast":null,"code":"var _jsxFileName = \"/Users/amiyaraskar/UT/23-24/HCI/cs378-p4/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cities = {\n  Dallas: {\n    lat: 32.7767,\n    lon: -96.7970\n  },\n  Houston: {\n    lat: 29.7604,\n    lon: -95.3698\n  },\n  Austin: {\n    lat: 30.2672,\n    lon: -97.7431\n  }\n};\nfunction App() {\n  _s();\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const [cityName, setCityName] = useState('');\n  const handleCitySelect = cityName => {\n    const city = cities[cityName];\n    setSelectedCity(cityName);\n    fetchWeatherData(city.lat, city.lon, setWeatherData, setError);\n  };\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/geocode?query=${cityName}`);\n      if (!response.ok) {\n        throw new Error('City not found');\n      }\n      const data = await response.json();\n      if (data.length === 0) {\n        throw new Error('City not found');\n      }\n      const {\n        latitude,\n        longitude\n      } = data[0];\n      handleCitySelect(cityName);\n    } catch (error) {\n      setError(`Could not find weather for ${cityName}`);\n      setWeatherData(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(cities).map(cityName => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCitySelect(cityName),\n        children: cityName\n      }, cityName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city name\",\n        value: cityName,\n        onChange: e => setCityName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Weather for \", selectedCity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(weatherData.hourly).map(hour => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Hour \", hour, \": \", weatherData.hourly[hour].temperature_2m.value, \" \\xB0C\"]\n        }, hour, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VRiZe6GqEJKP+YAZE1oDGtLMk90=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","cities","Dallas","lat","lon","Houston","Austin","App","_s","selectedCity","setSelectedCity","weatherData","setWeatherData","error","setError","cityName","setCityName","handleCitySelect","city","fetchWeatherData","handleSearch","response","fetch","ok","Error","data","json","length","latitude","longitude","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","onClick","type","placeholder","value","onChange","e","target","hourly","hour","temperature_2m","_c","$RefreshReg$"],"sources":["/Users/amiyaraskar/UT/23-24/HCI/cs378-p4/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \n// This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\nimport React, { useState, useEffect } from 'react';\n\nconst cities = {\n  Dallas: { lat: 32.7767, lon: -96.7970 },\n  Houston: { lat: 29.7604, lon: -95.3698 },\n  Austin: { lat: 30.2672, lon: -97.7431 },\n};\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const [cityName, setCityName] = useState('');\n\n  const handleCitySelect = (cityName) => {\n    const city = cities[cityName];\n    setSelectedCity(cityName);\n    fetchWeatherData(city.lat, city.lon, setWeatherData, setError);\n  };\n\n  const handleSearch = async () => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/geocode?query=${cityName}`);\n      if (!response.ok) {\n        throw new Error('City not found');\n      }\n      const data = await response.json();\n      if (data.length === 0) {\n        throw new Error('City not found');\n      }\n      const { latitude, longitude } = data[0];\n      handleCitySelect(cityName);\n    } catch (error) {\n      setError(`Could not find weather for ${cityName}`);\n      setWeatherData(null);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Weather App</h1>\n      <div>\n        {Object.keys(cities).map((cityName) => (\n          <button key={cityName} onClick={() => handleCitySelect(cityName)}>\n            {cityName}\n          </button>\n        ))}\n      </div>\n      <div>\n        <input type=\"text\" placeholder=\"Enter city name\" value={cityName} onChange={(e) => setCityName(e.target.value)} />\n        <button onClick={handleSearch}>+</button>\n      </div>\n      {error && <p>{error}</p>}\n      {weatherData && (\n        <div>\n          <h2>Weather for {selectedCity}</h2>\n          <ul>\n            {Object.keys(weatherData.hourly).map((hour) => (\n              <li key={hour}>Hour {hour}: {weatherData.hourly[hour].temperature_2m.value} Â°C</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}