{"ast":null,"code":"var _jsxFileName = \"/Users/amiyaraskar/UT/23-24/HCI/cs378-p4/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'your_api_key_here'; // Your Open Meteo API key\n\nconst fetchWeatherData = async (lat, lon, setWeatherData, setError) => {\n  try {\n    const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=all&start=now&end=now+1d`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    setWeatherData(data);\n    setError(null);\n  } catch (error) {\n    setError('Failed to fetch weather data');\n    setWeatherData(null);\n  }\n};\nconst cities = {\n  Dallas: {\n    lat: 32.7767,\n    lon: -96.7970\n  },\n  Houston: {\n    lat: 29.7604,\n    lon: -95.3698\n  },\n  Austin: {\n    lat: 30.2672,\n    lon: -97.7431\n  }\n};\nfunction App() {\n  _s();\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n  const handleCitySelect = cityName => {\n    const city = cities[cityName];\n    setSelectedCity(cityName);\n    fetchWeatherData(city.lat, city.lon, setWeatherData, setError);\n  };\n  const handleSearch = async cityName => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/geocode?query=${cityName}`);\n      if (!response.ok) {\n        throw new Error('City not found');\n      }\n      const data = await response.json();\n      if (data.length === 0) {\n        throw new Error('City not found');\n      }\n      const {\n        latitude,\n        longitude\n      } = data[0];\n      handleCitySelect(cityName);\n    } catch (error) {\n      setError(`Could not find weather for ${cityName}`);\n      setWeatherData(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(cities).map(cityName => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCitySelect(cityName),\n        children: cityName\n      }, cityName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter city name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSearch(cityName),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }, this), weatherData && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Weather for \", selectedCity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: Object.keys(weatherData.hourly).map(hour => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Hour \", hour, \": \", weatherData.hourly[hour].temperature_2m.value, \" \\xB0C\"]\n        }, hour, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wUPKsX6thzQSRjpeCPq8Zmy8RqQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","API_KEY","fetchWeatherData","lat","lon","setWeatherData","setError","response","fetch","ok","Error","status","data","json","error","cities","Dallas","Houston","Austin","App","_s","selectedCity","setSelectedCity","weatherData","handleCitySelect","cityName","city","handleSearch","length","latitude","longitude","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","onClick","type","placeholder","hourly","hour","temperature_2m","value","_c","$RefreshReg$"],"sources":["/Users/amiyaraskar/UT/23-24/HCI/cs378-p4/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \n// This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\nimport React, { useState, useEffect } from 'react';\n\nconst API_KEY = 'your_api_key_here'; // Your Open Meteo API key\n\nconst fetchWeatherData = async (lat, lon, setWeatherData, setError) => {\n  try {\n    const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=all&start=now&end=now+1d`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    setWeatherData(data);\n    setError(null);\n  } catch (error) {\n    setError('Failed to fetch weather data');\n    setWeatherData(null);\n  }\n};\n\nconst cities = {\n  Dallas: { lat: 32.7767, lon: -96.7970 },\n  Houston: { lat: 29.7604, lon: -95.3698 },\n  Austin: { lat: 30.2672, lon: -97.7431 },\n};\n\nfunction App() {\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [weatherData, setWeatherData] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleCitySelect = (cityName) => {\n    const city = cities[cityName];\n    setSelectedCity(cityName);\n    fetchWeatherData(city.lat, city.lon, setWeatherData, setError);\n  };\n\n  const handleSearch = async (cityName) => {\n    try {\n      const response = await fetch(`https://api.open-meteo.com/v1/geocode?query=${cityName}`);\n      if (!response.ok) {\n        throw new Error('City not found');\n      }\n      const data = await response.json();\n      if (data.length === 0) {\n        throw new Error('City not found');\n      }\n      const { latitude, longitude } = data[0];\n      handleCitySelect(cityName);\n    } catch (error) {\n      setError(`Could not find weather for ${cityName}`);\n      setWeatherData(null);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Weather App</h1>\n      <div>\n        {Object.keys(cities).map((cityName) => (\n          <button key={cityName} onClick={() => handleCitySelect(cityName)}>\n            {cityName}\n          </button>\n        ))}\n      </div>\n      <div>\n        <input type=\"text\" placeholder=\"Enter city name\" />\n        <button onClick={() => handleSearch(cityName)}>+</button>\n      </div>\n      {error && <p>{error}</p>}\n      {weatherData && (\n        <div>\n          <h2>Weather for {selectedCity}</h2>\n          <ul>\n            {Object.keys(weatherData.hourly).map((hour) => (\n              <li key={hour}>Hour {hour}: {weatherData.hourly[hour].temperature_2m.value} Â°C</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}