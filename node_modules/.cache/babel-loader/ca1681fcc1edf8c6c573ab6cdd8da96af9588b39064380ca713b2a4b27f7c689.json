{"ast":null,"code":"var _jsxFileName = \"/Users/amiyaraskar/UT/23-24/HCI/cs378-p4/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\nimport React, { useState, useEffect } from 'react';\n\n// WEATHER FORECAST: https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m\n// GEOCODING: https://geocoding-api.open-meteo.com/v1/search?name=Berlin&count=10&language=en&format=json\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cities = {\n  Dallas: {\n    lat: 32.7767,\n    lon: -96.7970\n  },\n  Houston: {\n    lat: 29.7604,\n    lon: -95.3698\n  },\n  Austin: {\n    lat: 30.2672,\n    lon: -97.7431\n  }\n};\nfunction App() {\n  _s();\n  const [city, setCity] = useState('Austin');\n  const [forecast, setForecast] = useState(null);\n  useEffect(() => {\n    async function fetchForecast() {\n      try {\n        const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${cities[city].lat}&longitude=${cities[city].lon}&hourly=temperature_2m`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch forecast');\n        }\n        const data = await response.json();\n        console.log(data); // Debugging\n        setForecast(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    fetchForecast();\n  }, [city]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hourly Forecast for \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCity('Dallas'),\n        children: \"Dallas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCity('Houston'),\n        children: \"Houston\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCity('Austin'),\n        children: \"Austin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), forecast && forecast.hours && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: forecast.hours.map((hourData, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [hourData.temperature_2m, \" \\xB0C at \", hourData.time]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0GQXp5/9aiqjEnl/hLYBpjkSHu4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","cities","Dallas","lat","lon","Houston","Austin","App","_s","city","setCity","forecast","setForecast","fetchForecast","response","fetch","ok","Error","data","json","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","hours","map","hourData","index","temperature_2m","time","_c","$RefreshReg$"],"sources":["/Users/amiyaraskar/UT/23-24/HCI/cs378-p4/src/App.js"],"sourcesContent":["import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \n// This imports bootstrap css styles. You can use bootstrap or your own classes by using the className attribute in your elements.\nimport React, { useState, useEffect } from 'react';\n\n// WEATHER FORECAST: https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m\n// GEOCODING: https://geocoding-api.open-meteo.com/v1/search?name=Berlin&count=10&language=en&format=json\nconst cities = {\n  Dallas: { lat: 32.7767, lon: -96.7970 },\n  Houston: { lat: 29.7604, lon: -95.3698 },\n  Austin: { lat: 30.2672, lon: -97.7431 },\n};\n\nfunction App() {\n  const [city, setCity] = useState('Austin');\n  const [forecast, setForecast] = useState(null);\n\n  useEffect(() => {\n    async function fetchForecast() {\n      try {\n        const response = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${cities[city].lat}&longitude=${cities[city].lon}&hourly=temperature_2m`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch forecast');\n        }\n        const data = await response.json();\n        console.log(data); // Debugging\n        setForecast(data);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    fetchForecast();\n  }, [city]);\n\n  return (\n    <div className=\"App\">\n      <h1>Hourly Forecast for {city}</h1>\n      <div>\n        <button onClick={() => setCity('Dallas')}>Dallas</button>\n        <button onClick={() => setCity('Houston')}>Houston</button>\n        <button onClick={() => setCity('Austin')}>Austin</button>\n      </div>\n      {forecast && forecast.hours && (\n        <ul>\n          {forecast.hours.map((hourData, index) => (\n            <li key={index}>{hourData.temperature_2m} Â°C at {hourData.time}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}